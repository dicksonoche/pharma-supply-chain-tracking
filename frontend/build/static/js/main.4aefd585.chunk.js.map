{"version":3,"sources":["apolloClient.js","App.js","index.js"],"names":["client","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","GET_BATCHES","gql","_templateObject","_taggedTemplateLiteral","GET_TEMPERATURE_EVENTS","_templateObject2","GET_BATCHES_BY_MANUFACTURER","_templateObject3","GET_TEMPERATURE_EVENTS_BY_BATCH","_templateObject4","App","batchesData","setBatchesData","useState","tempEventsData","setTempEventsData","manufacturerBatches","setManufacturerBatches","batchTempEvents","setBatchTempEvents","error","setError","tempRange","setTempRange","filter","setFilter","status","manufacturer","loading","batchesLoading","batchesError","useQuery","onCompleted","data","batches","onError","message","tempEventsLoading","tempEventsError","temperatureEvents","getBatchesByManufacturer","manufacturerLoading","useLazyQuery","getTemperatureEventsByBatch","batchLoading","handleFilterChange","e","name","value","target","prevFilter","filteredTempEvents","event","temperature","filteredBatches","batch","_jsx","className","children","_jsxs","href","id","Link","to","htmlFor","onChange","map","parseInt","Date","manufactureDate","toLocaleDateString","expiryDate","type","handleGetBatchesByManufacturer","variables","handleGetTemperatureEventsByBatch","batchId","timestamp","toLocaleString","split","Number","ReactDOM","render","ApolloProvider","Router","document","getElementById"],"mappings":"8NAUeA,I,QAAAA,EAPA,IAAIC,IAAa,CAC9BC,KAAM,IAAIC,IAAS,CACjBC,IAAK,2FAEPC,MAAO,IAAIC,M,uCCDb,MAAMC,EAAcC,YAAGC,MAAAC,YAAA,+HAajBC,EAAyBH,YAAGI,MAAAF,YAAA,iHAY5BG,EAA8BL,YAAGM,MAAAJ,YAAA,8NAajCK,EAAkCP,YAAGQ,MAAAN,YAAA,oMAmX5BO,MAxWf,WAEE,MAAOC,EAAaC,GAAkBC,mBAAS,KACxCC,EAAgBC,GAAqBF,mBAAS,KAC9CG,EAAqBC,GAA0BJ,mBAAS,KACxDK,EAAiBC,GAAsBN,mBAAS,KAChDO,EAAOC,GAAYR,mBAAS,KAC5BS,EAAWC,GAAgBV,mBAAS,CAAC,EAAG,OACxCW,EAAQC,GAAaZ,mBAAS,CAAEa,OAAQ,GAAIC,aAAc,MAGzDC,QAASC,EAAgBT,MAAOU,GAAiBC,YACvD/B,EACA,CACEgC,YAAcC,GAASrB,EAAeqB,EAAKC,SAC3CC,QAAUf,GAAUC,EAASD,EAAMgB,YAK/BR,QAASS,EAAmBjB,MAAOkB,GAAoBP,YAC7D3B,EACA,CACE4B,YAAcC,GAASlB,EAAkBkB,EAAKM,mBAC9CJ,QAAUf,GAAUC,EAASD,EAAMgB,YAKhCI,GAA4BZ,QAASa,IAC1CC,YAAapC,EAA6B,CACxC0B,YAAcC,GAAShB,EAAuBgB,EAAKC,SACnDC,QAAUf,GAAUC,EAASD,EAAMgB,YAIhCO,GAA+Bf,QAASgB,IAAkBF,YAC/DlC,EACA,CACEwB,YAAcC,GAASd,EAAmBc,EAAKM,mBAC/CJ,QAAUf,GAAUC,EAASD,EAAMgB,WAcjCS,EAAsBC,IAC1B,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1BxB,GAAWyB,IAAU,IAChBA,EACH,CAACH,GAAOC,KACP,EAICG,EAAqBrC,EAAeU,QACvC4B,GACCA,EAAMC,aAAe/B,EAAU,IAAM8B,EAAMC,YAAc/B,EAAU,KAIjEgC,EAAkB3C,EAAYa,QACjC+B,KACE/B,EAAOE,QAAS6B,EAAM7B,SAAWF,EAAOE,WACxCF,EAAOG,cAAe4B,EAAM5B,eAAiBH,EAAOG,gBAazD,OACE6B,cAAA,OAAKC,UAAU,kBAAiBC,SAC9BC,eAAA,OAAKF,UAAU,kBAAiBC,SAAA,CAC9BF,cAAA,OAAKC,UAAU,kDAAiDC,SAC9DC,eAAA,OAAKF,UAAU,6FAA4FC,SAAA,CACzGF,cAAA,KACEI,KAAK,IACLH,UAAU,4FAA2FC,SAErGF,cAAA,QAAMC,UAAU,oCAAmCC,SAAC,gBAItDC,eAAA,MACEF,UAAU,oFACVI,GAAG,OAAMH,SAAA,CAETF,cAAA,MAAAE,SACEC,eAACG,IAAI,CACHC,GAAG,IACH,iBAAe,WACfN,UAAU,wCAAuCC,SAAA,CAEjDF,cAAA,KAAGC,UAAU,yBAA4B,IACzCD,cAAA,QAAMC,UAAU,0BAAyBC,SAAC,cAAiB,SAG/DF,cAAA,MAAAE,SACEC,eAACG,IAAI,CACHC,GAAG,WACHN,UAAU,wCAAuCC,SAAA,CAEjDF,cAAA,KAAGC,UAAU,sBAAyB,IACtCD,cAAA,QAAMC,UAAU,0BAAyBC,SAAC,kBAAqB,iBAMzEC,eAAA,OAAKF,UAAU,cAAaC,SAAA,CAC1BF,cAAA,OAAKC,UAAU,2CAA0CC,SACvDF,cAAA,MAAAE,SAAI,0CAENC,eAAA,OAAKF,UAAU,YAAWC,SAAA,CACxBF,cAAA,OAAKC,UAAU,qCAAoCC,SACjDF,cAAA,MAAAE,SAAI,cAENF,cAAA,OAAKC,UAAU,cAAaC,SAAEtC,GAASA,IACvCuC,eAAA,OAAKF,UAAU,OAAMC,SAAA,CACnBC,eAAA,OAAKF,UAAU,sCAAqCC,SAAA,CAClDC,eAAA,OAAAD,SAAA,CACEF,cAAA,SAAOQ,QAAQ,eAAcN,SAAC,oBAC9BC,eAAA,UACEZ,KAAK,SACLc,GAAG,eACHI,SAAUpB,EACVY,UAAU,cAAaC,SAAA,CAEvBF,cAAA,UAAQR,MAAM,GAAEU,SAAC,QACjBF,cAAA,UAAQR,MAAM,uBAAsBU,SAAC,yBAGrCF,cAAA,UAAQR,MAAM,qBAAoBU,SAAC,6BAKvCC,eAAA,OAAAD,SAAA,CACEC,eAAA,SAAOK,QAAQ,qBAAoBN,SAAA,CAAC,uBACb,OAEvBC,eAAA,UACEZ,KAAK,eACLc,GAAG,qBACHI,SAAUpB,EACVY,UAAU,cAAaC,SAAA,CAEvBF,cAAA,UAAQR,MAAM,GAAEU,SAAC,QACjBF,cAAA,UAAQR,MAAM,aAAYU,SAAC,eAC3BF,cAAA,UAAQR,MAAM,eAAcU,SAAC,0BAInCC,eAAA,SAAOF,UAAU,QAAOC,SAAA,CACtBF,cAAA,SAAAE,SACEC,eAAA,MAAAD,SAAA,CACEF,cAAA,MAAAE,SAAI,aACJF,cAAA,MAAAE,SAAI,iBACJF,cAAA,MAAAE,SAAI,qBACJF,cAAA,MAAAE,SAAI,gBACJF,cAAA,MAAAE,SAAI,gBAGRF,cAAA,SAAAE,SACGJ,EAAgBY,KAAKX,GACpBI,eAAA,MAAAD,SAAA,CACEF,cAAA,MAAAE,SAAKS,SAASZ,EAAMM,MACpBL,cAAA,MAAAE,SAAKH,EAAM5B,eACX6B,cAAA,MAAAE,SACG,IAAIU,KACHD,SAASZ,EAAMc,kBACfC,uBAEJd,cAAA,MAAAE,SACG,IAAIU,KACHD,SAASZ,EAAMgB,aACfD,uBAEJd,cAAA,MACEC,UACmB,yBAAjBF,EAAM7B,OACF,cACA,eACLgC,SAEAH,EAAM7B,WApBF6B,EAAMM,WA0BrBF,eAAA,OAAKF,UAAU,OAAMC,SAAA,CACnBC,eAAA,SAAOK,QAAQ,oBAAmBN,SAAA,CAAC,yBACV,OAEzBF,cAAA,SACEgB,KAAK,OACLX,GAAG,oBACHI,SAAWnB,IACT2B,OA1IsB9C,EA0ISmB,EAAEG,OAAOD,WAzIxDR,EAAyB,CAAEkC,UAAW,CAAE/C,kBADFA,KA2IvB,EACD8B,UAAU,iBAEXhB,EACCe,cAAA,KAAAE,SAAG,eAEHC,eAAA,SAAOF,UAAU,aAAYC,SAAA,CAC3BF,cAAA,SAAAE,SACEC,eAAA,MAAAD,SAAA,CACEF,cAAA,MAAAE,SAAI,aACJF,cAAA,MAAAE,SAAI,iBACJF,cAAA,MAAAE,SAAI,qBACJF,cAAA,MAAAE,SAAI,gBACJF,cAAA,MAAAE,SAAI,gBAGRF,cAAA,SAAAE,SACG1C,EAAoBkD,KAAKX,GACxBI,eAAA,MAAAD,SAAA,CACEF,cAAA,MAAAE,SAAKS,SAASZ,EAAMM,MACpBL,cAAA,MAAAE,SAAKH,EAAM5B,eACX6B,cAAA,MAAAE,SACG,IAAIU,KACHD,SAASZ,EAAMc,kBACfC,uBAEJd,cAAA,MAAAE,SACG,IAAIU,KACHD,SAASZ,EAAMgB,aACfD,uBAEJd,cAAA,MACEC,UACmB,yBAAjBF,EAAM7B,OACF,cACA,eACLgC,SAEAH,EAAM7B,WApBF6B,EAAMM,cA4BzBF,eAAA,OAAKF,UAAU,OAAMC,SAAA,CACnBF,cAAA,SAAOQ,QAAQ,aAAYN,SAAC,wBAC5BF,cAAA,SACEgB,KAAK,OACLX,GAAG,aACHI,SAAWnB,IACT6B,OA1LyBC,EA0LS9B,EAAEG,OAAOD,WAzL3DL,EAA4B,CAAE+B,UAAW,CAAEE,aADFA,KA2L1B,EACDnB,UAAU,iBAEXb,EACCY,cAAA,KAAAE,SAAG,eAEHC,eAAA,SAAOF,UAAU,aAAYC,SAAA,CAC3BF,cAAA,SAAAE,SACEC,eAAA,MAAAD,SAAA,CACEF,cAAA,MAAAE,SAAI,aACJF,cAAA,MAAAE,SAAI,aACJF,cAAA,MAAAE,SAAI,wBACJF,cAAA,MAAAE,SAAI,mBAGRF,cAAA,SAAAE,SACGxC,EAAgBgD,KAAKd,GACpBO,eAAA,MAAAD,SAAA,CACEF,cAAA,MAAAE,SAAKN,EAAMS,KACXL,cAAA,MAAAE,SAAKS,SAASf,EAAMwB,WACpBpB,cAAA,MAAAE,SAAKN,EAAMC,cACXG,cAAA,MAAAE,SACG,IAAIU,KACHD,SAASf,EAAMyB,YACfC,qBAPG1B,EAAMS,oBAiB7BF,eAAA,OAAKF,UAAU,YAAWC,SAAA,CACxBF,cAAA,OAAKC,UAAU,qCAAoCC,SACjDF,cAAA,MAAAE,SAAI,yBAENF,cAAA,OAAKC,UAAU,cAAaC,SAAEtC,GAASA,IACvCuC,eAAA,OAAKF,UAAU,OAAMC,SAAA,CACnBF,cAAA,OAAKC,UAAU,sCAAqCC,SAClDC,eAAA,OAAAD,SAAA,CACEF,cAAA,SAAOQ,QAAQ,YAAWN,SAAC,wBAC3BC,eAAA,UACEE,GAAG,YACHI,SA5QanB,IAC7B,MAAME,EACe,QAAnBF,EAAEG,OAAOD,MACL,CAAC,EAAG,KACJF,EAAEG,OAAOD,MAAM+B,MAAM,KAAKb,IAAIc,QACpCzD,EAAayB,EAAM,EAwQHS,UAAU,cAAaC,SAAA,CAEvBF,cAAA,UAAQR,MAAM,MAAKU,SAAC,QACpBF,cAAA,UAAQR,MAAM,OAAMU,SAAC,SACrBF,cAAA,UAAQR,MAAM,QAAOU,SAAC,UACtBF,cAAA,UAAQR,MAAM,QAAOU,SAAC,UACtBF,cAAA,UAAQR,MAAM,QAAOU,SAAC,UACtBF,cAAA,UAAQR,MAAM,QAAOU,SAAC,UACtBF,cAAA,UAAQR,MAAM,QAAOU,SAAC,UACtBF,cAAA,UAAQR,MAAM,QAAOU,SAAC,UACtBF,cAAA,UAAQR,MAAM,QAAOU,SAAC,UACtBF,cAAA,UAAQR,MAAM,QAAOU,SAAC,UACtBF,cAAA,UAAQR,MAAM,SAAQU,SAAC,mBAI7BC,eAAA,SAAOF,UAAU,QAAOC,SAAA,CACtBF,cAAA,SAAAE,SACEC,eAAA,MAAAD,SAAA,CACEF,cAAA,MAAAE,SAAI,aACJF,cAAA,MAAAE,SAAI,aACJF,cAAA,MAAAE,SAAI,wBACJF,cAAA,MAAAE,SAAI,mBAGRF,cAAA,SAAAE,SACGP,EAAmBe,KAAKd,GACvBO,eAAA,MAAAD,SAAA,CACEF,cAAA,MAAAE,SAAKN,EAAMS,KACXL,cAAA,MAAAE,SAAKS,SAASf,EAAMwB,WACpBpB,cAAA,MAAAE,SAAKN,EAAMC,cACXG,cAAA,MAAAE,SACG,IAAIU,KAAKD,SAASf,EAAMyB,YAAYC,qBALhC1B,EAAMS,wBAiBnC,E,MCpZAoB,IAASC,OACP1B,cAAC2B,IAAc,CAAC1F,OAAQA,EAAOiE,SAC7BF,cAAC4B,IAAM,CAAA1B,SACLF,cAAC9C,EAAG,QAGR2E,SAASC,eAAe,Q","file":"static/js/main.4aefd585.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from \"@apollo/client\"; // Import necessary Apollo Client modules\n\n// Create a new ApolloClient instance\nconst client = new ApolloClient({\n  link: new HttpLink({\n    uri: \"https://api.studio.thegraph.com/query/10965/pharma-supply-chain-tracker/version/latest\", // URL to your subgraph\n  }),\n  cache: new InMemoryCache(), // Use in-memory cache for caching GraphQL results\n});\n\nexport default client; // Export the Apollo Client instance\n","import React, { useState } from \"react\";\nimport { gql, useQuery, useLazyQuery } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\nimport client from \"./apolloClient\"; // Import Apollo Client instance\n\n// Define the GraphQL query to fetch batches data\nconst GET_BATCHES = gql`\n  {\n    batches {\n      id\n      manufacturer\n      manufactureDate\n      expiryDate\n      status\n    }\n  }\n`;\n\n// Define the GraphQL query to fetch temperature events data\nconst GET_TEMPERATURE_EVENTS = gql`\n  {\n    temperatureEvents {\n      id\n      batchId\n      temperature\n      timestamp\n    }\n  }\n`;\n\n// Define the GraphQL query to fetch batches by manufacturer\nconst GET_BATCHES_BY_MANUFACTURER = gql`\n  query getBatchesByManufacturer($manufacturer: String!) {\n    batches(where: { manufacturer: $manufacturer }) {\n      id\n      manufacturer\n      manufactureDate\n      expiryDate\n      status\n    }\n  }\n`;\n\n// Define the GraphQL query to fetch temperature events by batch ID\nconst GET_TEMPERATURE_EVENTS_BY_BATCH = gql`\n  query getTemperatureEventsByBatch($batchId: String!) {\n    temperatureEvents(where: { batchId: $batchId }) {\n      id\n      batchId\n      temperature\n      timestamp\n    }\n  }\n`;\n\nfunction App() {\n  // State to hold batches and temperature events data\n  const [batchesData, setBatchesData] = useState([]);\n  const [tempEventsData, setTempEventsData] = useState([]);\n  const [manufacturerBatches, setManufacturerBatches] = useState([]);\n  const [batchTempEvents, setBatchTempEvents] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [tempRange, setTempRange] = useState([0, 100]);\n  const [filter, setFilter] = useState({ status: \"\", manufacturer: \"\" });\n\n  // Fetch batches data using the GET_BATCHES query\n  const { loading: batchesLoading, error: batchesError } = useQuery(\n    GET_BATCHES,\n    {\n      onCompleted: (data) => setBatchesData(data.batches),\n      onError: (error) => setError(error.message),\n    }\n  );\n\n  // Fetch temperature events data using the GET_TEMPERATURE_EVENTS query\n  const { loading: tempEventsLoading, error: tempEventsError } = useQuery(\n    GET_TEMPERATURE_EVENTS,\n    {\n      onCompleted: (data) => setTempEventsData(data.temperatureEvents),\n      onError: (error) => setError(error.message),\n    }\n  );\n\n  // Lazy query to get batches by manufacturer\n  const [getBatchesByManufacturer, { loading: manufacturerLoading }] =\n    useLazyQuery(GET_BATCHES_BY_MANUFACTURER, {\n      onCompleted: (data) => setManufacturerBatches(data.batches),\n      onError: (error) => setError(error.message),\n    });\n\n  // Lazy query to get temperature events by batch ID\n  const [getTemperatureEventsByBatch, { loading: batchLoading }] = useLazyQuery(\n    GET_TEMPERATURE_EVENTS_BY_BATCH,\n    {\n      onCompleted: (data) => setBatchTempEvents(data.temperatureEvents),\n      onError: (error) => setError(error.message),\n    }\n  );\n\n  // Function to handle temperature range change\n  const handleTempRangeChange = (e) => {\n    const value =\n      e.target.value === \"All\"\n        ? [0, 100]\n        : e.target.value.split(\"-\").map(Number);\n    setTempRange(value);\n  };\n\n  // Function to handle filter change\n  const handleFilterChange = (e) => {\n    const { name, value } = e.target;\n    setFilter((prevFilter) => ({\n      ...prevFilter,\n      [name]: value,\n    }));\n  };\n\n  // Filter temperature events based on the selected temperature range\n  const filteredTempEvents = tempEventsData.filter(\n    (event) =>\n      event.temperature >= tempRange[0] && event.temperature < tempRange[1]\n  );\n\n  // Filter batches based on the selected filters\n  const filteredBatches = batchesData.filter(\n    (batch) =>\n      (filter.status ? batch.status === filter.status : true) &&\n      (filter.manufacturer ? batch.manufacturer === filter.manufacturer : true)\n  );\n\n  // Handle click to fetch batches by manufacturer\n  const handleGetBatchesByManufacturer = (manufacturer) => {\n    getBatchesByManufacturer({ variables: { manufacturer } });\n  };\n\n  // Handle click to fetch temperature events by batch ID\n  const handleGetTemperatureEventsByBatch = (batchId) => {\n    getTemperatureEventsByBatch({ variables: { batchId } });\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row flex-nowrap\">\n        <div className=\"col-auto col-md-3 col-xl-2 px-sm-2 px-0 bg-dark\">\n          <div className=\"d-flex flex-column align-items-center align-items-sm-start px-3 pt-2 text-white min-vh-100\">\n            <a\n              href=\"/\"\n              className=\"d-flex align-items-center pb-3 mb-md-1 mt-md-3 me-md-auto text-white text-decoration-none\"\n            >\n              <span className=\"fs-5 fw-bolder d-none d-sm-inline\">\n                MediChain\n              </span>\n            </a>\n            <ul\n              className=\"nav nav-pills flex-column mb-sm-auto mb-0 align-items-center align-items-sm-start\"\n              id=\"menu\"\n            >\n              <li>\n                <Link\n                  to=\"/\"\n                  data-bs-toggle=\"collapse\"\n                  className=\"nav-link text-white px-0 align-middle\"\n                >\n                  <i className=\"fs-4 bi-speedometer2\"></i>{\" \"}\n                  <span className=\"ms-1 d-none d-sm-inline\">Dashboard</span>{\" \"}\n                </Link>\n              </li>\n              <li>\n                <Link\n                  to=\"/preview\"\n                  className=\"nav-link px-0 align-middle text-white\"\n                >\n                  <i className=\"fs-4 bi-list-task\"></i>{\" \"}\n                  <span className=\"ms-1 d-none d-sm-inline\">Manage Supply</span>{\" \"}\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"col p-0 m-0\">\n          <div className=\"p-2 d-flex justify-content-center shadow\">\n            <h4>Pharmaceutical Supply Chain Tracker</h4>\n          </div>\n          <div className=\"px-5 py-3\">\n            <div className=\"d-flex justify-content-center mt-2\">\n              <h3>Batches</h3>\n            </div>\n            <div className=\"text-danger\">{error && error}</div>\n            <div className=\"mt-3\">\n              <div className=\"d-flex justify-content-between mb-3\">\n                <div>\n                  <label htmlFor=\"statusFilter\">Status Filter: </label>\n                  <select\n                    name=\"status\"\n                    id=\"statusFilter\"\n                    onChange={handleFilterChange}\n                    className=\"form-select\"\n                  >\n                    <option value=\"\">All</option>\n                    <option value=\"Temperature Exceeded\">\n                      Temperature Exceeded\n                    </option>\n                    <option value=\"Temperature Normal\">\n                      Temperature Normal\n                    </option>\n                  </select>\n                </div>\n                <div>\n                  <label htmlFor=\"manufacturerFilter\">\n                    Manufacturer Filter:{\" \"}\n                  </label>\n                  <select\n                    name=\"manufacturer\"\n                    id=\"manufacturerFilter\"\n                    onChange={handleFilterChange}\n                    className=\"form-select\"\n                  >\n                    <option value=\"\">All</option>\n                    <option value=\"Dipo-Test1\">Dipo-Test1</option>\n                    <option value=\"Wellness Ltd\">Wellness Ltd</option>\n                  </select>\n                </div>\n              </div>\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th>Batch ID</th>\n                    <th>Manufacturer</th>\n                    <th>Manufacture Date</th>\n                    <th>Expiry Date</th>\n                    <th>Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredBatches.map((batch) => (\n                    <tr key={batch.id}>\n                      <td>{parseInt(batch.id)}</td>\n                      <td>{batch.manufacturer}</td>\n                      <td>\n                        {new Date(\n                          parseInt(batch.manufactureDate)\n                        ).toLocaleDateString()}\n                      </td>\n                      <td>\n                        {new Date(\n                          parseInt(batch.expiryDate)\n                        ).toLocaleDateString()}\n                      </td>\n                      <td\n                        className={\n                          batch.status === \"Temperature Exceeded\"\n                            ? \"text-danger\"\n                            : \"text-success\"\n                        }\n                      >\n                        {batch.status}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              <div className=\"mt-3\">\n                <label htmlFor=\"manufacturerQuery\">\n                  Query by Manufacturer:{\" \"}\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"manufacturerQuery\"\n                  onChange={(e) =>\n                    handleGetBatchesByManufacturer(e.target.value)\n                  }\n                  className=\"form-control\"\n                />\n                {manufacturerLoading ? (\n                  <p>Loading...</p>\n                ) : (\n                  <table className=\"table mt-3\">\n                    <thead>\n                      <tr>\n                        <th>Batch ID</th>\n                        <th>Manufacturer</th>\n                        <th>Manufacture Date</th>\n                        <th>Expiry Date</th>\n                        <th>Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {manufacturerBatches.map((batch) => (\n                        <tr key={batch.id}>\n                          <td>{parseInt(batch.id)}</td>\n                          <td>{batch.manufacturer}</td>\n                          <td>\n                            {new Date(\n                              parseInt(batch.manufactureDate)\n                            ).toLocaleDateString()}\n                          </td>\n                          <td>\n                            {new Date(\n                              parseInt(batch.expiryDate)\n                            ).toLocaleDateString()}\n                          </td>\n                          <td\n                            className={\n                              batch.status === \"Temperature Exceeded\"\n                                ? \"text-danger\"\n                                : \"text-success\"\n                            }\n                          >\n                            {batch.status}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                )}\n              </div>\n              <div className=\"mt-3\">\n                <label htmlFor=\"batchQuery\">Query by Batch ID: </label>\n                <input\n                  type=\"text\"\n                  id=\"batchQuery\"\n                  onChange={(e) =>\n                    handleGetTemperatureEventsByBatch(e.target.value)\n                  }\n                  className=\"form-control\"\n                />\n                {batchLoading ? (\n                  <p>Loading...</p>\n                ) : (\n                  <table className=\"table mt-3\">\n                    <thead>\n                      <tr>\n                        <th>Event ID</th>\n                        <th>Batch ID</th>\n                        <th>Temperature (°C)</th>\n                        <th>Timestamp</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {batchTempEvents.map((event) => (\n                        <tr key={event.id}>\n                          <td>{event.id}</td>\n                          <td>{parseInt(event.batchId)}</td>\n                          <td>{event.temperature}</td>\n                          <td>\n                            {new Date(\n                              parseInt(event.timestamp)\n                            ).toLocaleString()}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"px-5 py-3\">\n            <div className=\"d-flex justify-content-center mt-2\">\n              <h3>Temperature Events</h3>\n            </div>\n            <div className=\"text-danger\">{error && error}</div>\n            <div className=\"mt-3\">\n              <div className=\"d-flex justify-content-between mb-3\">\n                <div>\n                  <label htmlFor=\"tempRange\">Temperature Range: </label>\n                  <select\n                    id=\"tempRange\"\n                    onChange={handleTempRangeChange}\n                    className=\"form-select\"\n                  >\n                    <option value=\"All\">All</option>\n                    <option value=\"0-10\">0-10</option>\n                    <option value=\"10-20\">10-20</option>\n                    <option value=\"20-30\">20-30</option>\n                    <option value=\"30-40\">30-40</option>\n                    <option value=\"40-50\">40-50</option>\n                    <option value=\"50-60\">50-60</option>\n                    <option value=\"60-70\">60-70</option>\n                    <option value=\"70-80\">70-80</option>\n                    <option value=\"80-90\">80-90</option>\n                    <option value=\"90-100\">90-100</option>\n                  </select>\n                </div>\n              </div>\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th>Event ID</th>\n                    <th>Batch ID</th>\n                    <th>Temperature (°C)</th>\n                    <th>Timestamp</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredTempEvents.map((event) => (\n                    <tr key={event.id}>\n                      <td>{event.id}</td>\n                      <td>{parseInt(event.batchId)}</td>\n                      <td>{event.temperature}</td>\n                      <td>\n                        {new Date(parseInt(event.timestamp)).toLocaleString()}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\"; // Import React\nimport ReactDOM from \"react-dom\"; // Import ReactDOM for rendering the app\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport { ApolloProvider } from \"@apollo/client\"; // Import ApolloProvider to provide Apollo Client to the app\nimport client from \"./apolloClient\"; // Import the Apollo Client instance\nimport App from \"./App\"; // Import the main App component\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n// Wrap the App component with ApolloProvider and render it\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router>\n      <App />\n    </Router>\n  </ApolloProvider>,\n  document.getElementById(\"root\") // Mount the app to the DOM element with id 'root'\n);\n"],"sourceRoot":""}